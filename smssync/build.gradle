apply plugin: 'android-sdk-manager'
apply plugin: 'android'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':libraries:pay-me')
    compile project(':libraries:survey-dialog')
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:19.1.+'
    compile 'com.android.support:appcompat-v7:19.0.+'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup:otto:1.3.4'
    compile 'com.google.code.gson:gson:2.3'
    androidTestCompile 'org.mockito:mockito-core:1.9.+'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.+'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.+'
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    sourceSets {

        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
        }

        defaultConfig {
            testApplicationId "org.addhen.smssync.tests"
            applicationId "org.addhen.smssync"
            buildConfigField "String", "GOOGLE_FORM_URL", project.hasProperty('googleDocsForm') ? googleDocsForm : "\"\""
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {

        releaseSign
    }

    buildTypes {

        proguard.initWith(buildTypes.debug)
        proguard {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        release {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else{
                resValue "string", "ga_trackingId", ""
            }
            signingConfig signingConfigs.releaseSign
        }

        debug {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else{
                resValue "string", "ga_trackingId", ""
            }
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
        }

        proguard.initWith(buildTypes.release)
        proguard {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

    }

    defaultConfig {
        versionCode 26
        versionName "2.7.3"
        minSdkVersion 8
        targetSdkVersion 21
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def newName = outputFile.name.replace(".apk",
                        "-v" + defaultConfig.versionName + "-" + variant.buildType.name.toUpperCase() +
                                ".apk");

                output.outputFile = file("$project.buildDir/apk/" + newName);
                if (output.zipAlign) {
                    output.zipAlign.outputFile =
                            file("$project.buildDir/apk/" + newName.replace("-unaligned", ""));
                }
            }
        }
    }

    flavorDimensions "analytics"
    productFlavors {

        withAnalytics {
            flavorDimension "analytics"
        }

        noAnalytics {
            flavorDimension "analytics"
        }
    }
}

if (project.hasProperty('releaseKeyStore') &&
        project.hasProperty('releaseKeyPassword') &&
        project.hasProperty('releaseKeyStorePassword') &&
        project.hasProperty('releaseKeyAlias')) {
    android.signingConfigs.releaseSign.keyAlias = releaseKeyAlias
    android.signingConfigs.releaseSign.storeFile = file(releaseKeyStore)
    android.signingConfigs.releaseSign.storePassword = releaseKeyStorePassword
    android.signingConfigs.releaseSign.keyPassword = releaseKeyPassword
} else {
    android.signingConfigs.releaseSign.keyAlias ""
    android.signingConfigs.releaseSign.storeFile null
    android.signingConfigs.releaseSign.storePassword ""
    android.signingConfigs.releaseSign.keyPassword ""
}



